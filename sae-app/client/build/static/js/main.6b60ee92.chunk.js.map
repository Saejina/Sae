{"version":3,"sources":["middleware/isDark.ts","middleware/cleanLocalStorage.ts","middleware/isLoggedIn.ts","middleware/getPermissions.ts","hooks/usePermissions.ts","components/Sidebar.tsx","utils.ts","forms/LoginForm.tsx","components/LoginModal.tsx","components/Divider.tsx","middleware/removeToken.ts","components/AvatarOffcanvas.tsx","middleware/getMode.ts","middleware/changeMode.ts","components/Topbar.tsx","components/AppLayout.tsx","middleware/getDiscordServers.ts","hooks/useDiscordServers.ts","components/ServerDropdown.tsx","middleware/getDiscordChannels.ts","hooks/useDiscordChannels.ts","components/ChannelDropdown.tsx","components/ItemsTable.tsx","forms/PollForm.tsx","components/Poll.tsx","middleware/getDiscordData.ts","hooks/useDiscordData.ts","pages/Commands.tsx","pages/Home.tsx","pages/NotFound.tsx","components/PermissionForm.tsx","middleware/setNewPermissions.ts","components/UserPermissionsCard.tsx","middleware/getDiscordIds.ts","hooks/useDiscordIds.ts","pages/Permissions.tsx","pages/Users.tsx","configs/routes.ts","components/PrivateComponent.tsx","components/PrivateRoute.tsx","configs/mui-theme.ts","App.tsx","reportWebVitals.ts","configs/darkMode.ts","index.tsx"],"names":["isDark","document","documentElement","classList","contains","cleanLocalStorage","axios","get","process","params","token","localStorage","getItem","then","response","data","loggedIn","removeItem","catch","err","console","log","isLoggedIn","getPermissions","setPermissions","id","a","permissions","usePermissions","useState","undefined","useEffect","sidebarItems","title","path","Icon","HomeOutlinedIcon","PeopleAltOutlinedIcon","permission","AssignmentOutlinedIcon","AssignmentLateOutlinedIcon","Sidebar","active","className","clsx","Nav","defaultActiveKey","map","index","includes","OverlayTrigger","placement","overlay","Tooltip","Link","eventKey","href","refresh","window","location","reload","initialState","username","password","isButtonDisabled","helperText","isError","reducer","state","action","type","payload","LoginForm","setShow","useReducer","dispatch","trim","handleLogin","Axios","post","setItem","msg","handleKeyPress","event","keyCode","which","noValidate","autoComplete","Card","bg","Body","TextField","error","fullWidth","label","placeholder","margin","onChange","target","value","onKeyPress","autoFocus","Button","variant","size","onClick","disabled","defaults","withCredentials","theme","createTheme","palette","primary","main","LoginModal","show","modalProps","ThemeProvider","Modal","contentClassName","Header","closeButton","closeVariant","Title","Divider","color","xs","sm","md","lg","xl","none","removeToken","AvatarOffcanvas","image","handleClose","Image","src","alt","roundedCircle","fluid","Offcanvas","onHide","scroll","backdrop","Container","Item","getMode","changeMode","customMode","add","remove","Topbar","btnLabel","colorTheme","Brightness4","Brightness7","profilePic","Spinner","animation","backdropClassName","AppLayout","children","useLocation","pathname","setDiscordServers","servers","useDiscordData","name","serverPic","discordServers","getDiscordServers","ServerTemplate","initials","replace","split","word","ServerDropdown","setServer","useDiscordServers","newopts","server","options","isSearchable","setDiscordChannels","serverId","channels","useDiscordChannels","category","discordChannels","getDiscordChannels","ChannelTemplate","ChannelDropdown","setChannel","channel","isLoading","isDisabled","ItemsTable","items","length","ListGroup","item","text","channelId","question","currentOption","isOptionDisabled","isTimeUsed","concat","splice","time","PollForm","handleOptionAdd","handleRemoveOption","Number","parentElement","option","Checkbox","checked","PollOffCanvas","props","Poll","setDiscordData","discord_id","platformId","getDiscordData","discordData","Commands","withRouter","Home","NotFound","PermissionForm","administrator","setAdministrator","community","setCommunity","commands","setCommands","setHelperText","fields","field","FormControlLabel","control","FormHelperText","setHelper","put","setNewPermissions","secondary","UserPermissionsCard","setIsLoading","centered","setDiscordIds","useDiscordIds","discordIds","getDiscordIds","Permissions","Users","routes","page","pages","secured","PrivateComponent","openedChildren","neededPermission","PrivateRoute","routeProps","to","warning","App","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","darkModeConfig","matchMedia","matches","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.6b60ee92.chunk.js","sourcesContent":["export const isDark = (): boolean => {\n    if (document.documentElement.classList.contains('dark')) {\n        return true;\n    }\n    return false;\n};\n\nexport default isDark;\n","import axios from 'axios';\n\nexport function cleanLocalStorage(): void {\n    axios\n        .get(process.env.REACT_APP_API_ADDRESS + '/login', { params: { token: localStorage.getItem('saejinaToken') } })\n        .then((response) => {\n            if (!response.data.loggedIn) {\n                localStorage.removeItem('saejinaToken');\n            }\n        })\n        .catch((err) => {\n            console.log(err);\n        });\n}\n\nexport default cleanLocalStorage;\n","import cleanLocalStorage from './cleanLocalStorage';\n\nfunction isLoggedIn(): boolean {\n    cleanLocalStorage();\n    if (!localStorage.getItem('saejinaToken')) return false;\n    else return true;\n}\n\nexport default isLoggedIn;\n","import axios from 'axios';\n\nexport default async function getPermissions(setPermissions: Function, id?: string): Promise<void> {\n    if (id) {\n        axios\n            .get(process.env.REACT_APP_API_ADDRESS + '/perms/' + id) //TODO\n            .then((response) => {\n                setPermissions(response.data.permissions);\n            });\n    } else {\n        axios\n            .get(process.env.REACT_APP_API_ADDRESS + '/perms', {\n                params: { token: localStorage.getItem('saejinaToken') },\n            })\n            .then((response) => {\n                setPermissions(response.data.permissions);\n            });\n    }\n}\n","import { useState, useEffect } from 'react';\nimport isLoggedIn from '../middleware/isLoggedIn';\nimport getPermissions from '../middleware/getPermissions';\n\nexport default function usePermissions(id?: string): any {\n    const [permissions, setPermissions] = useState(undefined);\n    useEffect(() => {\n        if (isLoggedIn()) getPermissions(setPermissions, id);\n    }, [setPermissions]);\n    return [permissions, setPermissions];\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport HomeOutlinedIcon from '@material-ui/icons/HomeOutlined';\nimport PeopleAltOutlinedIcon from '@material-ui/icons/PeopleAltOutlined';\nimport AssignmentOutlinedIcon from '@material-ui/icons/AssignmentOutlined';\nimport AssignmentLateOutlinedIcon from '@material-ui/icons/AssignmentLateOutlined';\nimport { Tooltip, OverlayTrigger, Nav } from 'react-bootstrap';\nimport isDark from '../middleware/isDark';\nimport usePermissions from '../hooks/usePermissions';\n\nconst sidebarItems = [\n    { title: 'Home', path: '/', Icon: HomeOutlinedIcon },\n    { title: 'Users', path: '/users', Icon: PeopleAltOutlinedIcon, permission: 'community' },\n    { title: 'Commands', path: '/commands', Icon: AssignmentOutlinedIcon, permission: 'commands' },\n    { title: 'Permissions', path: '/permissions', Icon: AssignmentLateOutlinedIcon, permission: 'administrator' },\n];\n\nfunction Sidebar({ active, className }: SidebarProps): JSX.Element {\n    const [permissions] = usePermissions();\n    return (\n        <div\n            className={clsx(\n                className,\n                'flex flex-col flex-shrink-0 w-1/30 min-w-min h-screen border-r',\n                isDark() ? 'bg-darker border-light' : 'bg-light border-danger',\n            )}\n        >\n            <Nav defaultActiveKey=\"/\" className=\"flex flex-col items-center justify-center\">\n                {sidebarItems.map(({ title, path, Icon, permission }, index) => {\n                    if (\n                        !permission ||\n                        (permissions && (permissions.includes(permission) || permissions.includes('administrator')))\n                    )\n                        return (\n                            <OverlayTrigger\n                                key={'right-tooltip-' + index}\n                                placement={'right'}\n                                overlay={\n                                    <Tooltip id={`tooltip-right-${index}`} className=\"ml-1\">\n                                        {title}\n                                    </Tooltip>\n                                }\n                            >\n                                <Nav.Link\n                                    key={index}\n                                    eventKey={'link-' + index}\n                                    href={path}\n                                    className={clsx(\n                                        'border-b w-full h-16 flex items-center justify-center',\n                                        isDark() ? 'border-light' : 'border-danger',\n                                    )}\n                                >\n                                    <Icon\n                                        className={\n                                            active === path\n                                                ? isDark()\n                                                    ? 'text-secondary'\n                                                    : 'text-warning'\n                                                : isDark()\n                                                ? 'text-primary'\n                                                : 'text-success'\n                                        }\n                                    />\n                                </Nav.Link>\n                            </OverlayTrigger>\n                        );\n                    else return <div key={'private-' + index}></div>;\n                })}\n            </Nav>\n        </div>\n    );\n}\n\nexport interface SidebarProps {\n    active: string;\n    className?: string;\n}\n\nexport default Sidebar;\n","export function refresh(): void {\n    window.location.reload();\n}\n\nexport function capitalize(string: string): string {\n    return string.charAt(0).toUpperCase() + string.slice(1);\n}\n\nexport default refresh;\n","import React, { useEffect, useReducer } from 'react';\nimport Axios from 'axios';\nimport TextField from '@material-ui/core/TextField';\nimport { Button, Card } from 'react-bootstrap';\nimport refresh from '../utils';\n\ntype State = {\n    username: string;\n    password: string;\n    isButtonDisabled: boolean;\n    helperText: string;\n    isError: boolean;\n};\n\nconst initialState: State = {\n    username: '',\n    password: '',\n    isButtonDisabled: true,\n    helperText: '',\n    isError: false,\n};\n\ntype Action =\n    | { type: 'setUsername'; payload: string }\n    | { type: 'setPassword'; payload: string }\n    | { type: 'setIsButtonDisabled'; payload: boolean }\n    | { type: 'loginSuccess'; payload: string }\n    | { type: 'loginFailed'; payload: string }\n    | { type: 'setIsError'; payload: boolean };\n\nconst reducer = (state: State, action: Action): State => {\n    switch (action.type) {\n        case 'setUsername':\n            return {\n                ...state,\n                username: action.payload,\n            };\n        case 'setPassword':\n            return {\n                ...state,\n                password: action.payload,\n            };\n        case 'setIsButtonDisabled':\n            return {\n                ...state,\n                isButtonDisabled: action.payload,\n            };\n        case 'loginSuccess':\n            return {\n                ...state,\n                helperText: action.payload,\n                isError: false,\n            };\n        case 'loginFailed':\n            return {\n                ...state,\n                helperText: action.payload,\n                isError: true,\n            };\n        case 'setIsError':\n            return {\n                ...state,\n                isError: action.payload,\n            };\n    }\n};\n\nfunction LoginForm({ setShow }: LoginFormProps): JSX.Element {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    useEffect(() => {\n        if (state.username.trim() && state.password.trim()) {\n            dispatch({\n                type: 'setIsButtonDisabled',\n                payload: false,\n            });\n        } else {\n            dispatch({\n                type: 'setIsButtonDisabled',\n                payload: true,\n            });\n        }\n    }, [state.username, state.password]);\n    const handleLogin = () => {\n        Axios.post(process.env.REACT_APP_API_ADDRESS + '/login', {\n            username: state.username.trim(),\n            password: state.password.trim(),\n        })\n            .then((response) => {\n                localStorage.setItem('saejinaToken', response.data.token);\n                dispatch({\n                    type: 'loginSuccess',\n                    payload: response.data.msg,\n                });\n                setShow(false);\n                refresh();\n            })\n            .catch((err) => {\n                dispatch({\n                    type: 'loginFailed',\n                    payload: err.response ? err.response.data.msg : 'Internal server error',\n                });\n                console.log(err);\n            });\n    };\n    const handleKeyPress = (event: React.KeyboardEvent) => {\n        if (event.keyCode === 13 || event.which === 13) {\n            state.isButtonDisabled || handleLogin();\n        }\n    };\n\n    const handleUsernameChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n        dispatch({\n            type: 'setUsername',\n            payload: event.target.value,\n        });\n    };\n\n    const handlePasswordChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n        dispatch({\n            type: 'setPassword',\n            payload: event.target.value,\n        });\n    };\n    return (\n        <form noValidate autoComplete=\"off\">\n            <Card bg=\"lighter\">\n                <Card.Body>\n                    <div>\n                        <TextField\n                            error={state.isError}\n                            fullWidth\n                            id=\"username\"\n                            type=\"username\"\n                            label=\"Username\"\n                            placeholder=\"Username\"\n                            margin=\"normal\"\n                            onChange={handleUsernameChange}\n                            onKeyPress={handleKeyPress}\n                            autoFocus\n                        />\n                        <TextField\n                            error={state.isError}\n                            fullWidth\n                            id=\"password\"\n                            type=\"password\"\n                            label=\"Password\"\n                            placeholder=\"Password\"\n                            margin=\"normal\"\n                            helperText={state.helperText}\n                            onChange={handlePasswordChange}\n                            onKeyPress={handleKeyPress}\n                        />\n                    </div>\n                    <Button\n                        variant=\"success\"\n                        size=\"lg\"\n                        className={'flex-grow w-full'}\n                        onClick={handleLogin}\n                        disabled={state.isButtonDisabled}\n                    >\n                        Login\n                    </Button>\n                </Card.Body>\n            </Card>\n        </form>\n    );\n}\n\nexport interface LoginFormProps {\n    setShow: Function;\n}\n\nexport default LoginForm;\n","import React from 'react';\nimport Axios from 'axios';\nimport clsx from 'clsx';\nimport { ModalProps, Modal } from 'react-bootstrap';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { createTheme } from '@material-ui/core';\nimport isDark from '../middleware/isDark';\nimport LoginForm from '../forms/LoginForm';\n\nAxios.defaults.withCredentials = true;\n\nconst theme = createTheme({\n    palette: {\n        primary: { main: '#1f51ff' },\n    },\n});\n\nexport function LoginModal({ show, setShow, ...modalProps }: LoginModalProps): JSX.Element {\n    return (\n        <ThemeProvider theme={theme}>\n            <Modal show={show} {...modalProps} contentClassName=\"bg-darker\">\n                <Modal.Header\n                    closeButton\n                    closeVariant={isDark() ? 'white' : undefined}\n                    className={clsx(isDark() ? 'bg-darker text-light border-light' : 'bg-light text-dark border-dark')}\n                >\n                    <Modal.Title>Login</Modal.Title>\n                </Modal.Header>\n                <Modal.Body className={clsx(isDark() ? 'bg-darker' : 'bg-light')}>\n                    <LoginForm setShow={setShow} />\n                </Modal.Body>\n            </Modal>\n        </ThemeProvider>\n    );\n}\n\nexport interface LoginModalProps extends ModalProps {\n    show: boolean;\n    setShow: Function;\n}\n\nexport default LoginModal;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { size } from '../types';\n\nfunction Divider({ size = 'xs', color, className }: DividerProps): JSX.Element {\n    const sizeMappings = {\n        xs: 'border-b my-2',\n        sm: 'border my-3',\n        md: 'border-2 my-4',\n        lg: 'border-4 my-6',\n        xl: 'border-8 my-8',\n        none: 'border-0 my-1',\n    };\n    return (\n        <div className={clsx(className, 'w-full', sizeMappings[size], color ? 'border-' + color : 'border-primary')} />\n    );\n}\n\nexport interface DividerProps {\n    size?: size;\n    color?: string;\n    className?: string;\n}\n\nexport default Divider;\n","export function removeToken(): boolean {\n    localStorage.removeItem('saejinaToken');\n    return true;\n}\n\nexport default removeToken;\n","import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { Container, Image, Offcanvas, Nav } from 'react-bootstrap';\nimport { Button } from '@material-ui/core';\nimport Divider from './Divider';\nimport refresh from '../utils';\nimport removeToken from '../middleware/removeToken';\nimport isDark from '../middleware/isDark';\n\nexport function AvatarOffcanvas({ image, username }: AvatarModalProps): JSX.Element {\n    const [show, setShow] = useState(false);\n\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n    const handleDisconnect = () => removeToken() && refresh();\n\n    return (\n        <div className=\"flex items-center\">\n            <button onClick={show ? handleClose : handleShow} className=\"w-14\">\n                <Image src={image} alt=\"PP\" roundedCircle fluid className=\"h-14\" />\n            </button>\n            <Offcanvas\n                show={show}\n                onHide={handleClose}\n                placement=\"end\"\n                scroll={true}\n                backdrop={true}\n                className={clsx(isDark() ? 'bg-dark text-light' : 'bg-light text-dark')}\n            >\n                <Offcanvas.Header closeButton closeVariant={isDark() ? 'white' : undefined}>\n                    Bonjour {username} !\n                </Offcanvas.Header>\n                <Offcanvas.Body>\n                    <Container className=\"flex flex-col items-center\">\n                        <Image src={image} alt=\"PP\" roundedCircle fluid className=\"h-32 mx-6\" />\n                        <Divider size=\"xs\" color={isDark() ? 'lighter' : 'dark'} className=\"my-4\" />\n                        <Nav className=\"flex-col w-full space-y-2\">\n                            <Nav.Item>\n                                <Button\n                                    color=\"primary\"\n                                    disabled\n                                    className={clsx('w-full', isDark() ? 'text-light' : 'text-dark')}\n                                >\n                                    Coming soon...\n                                </Button>\n                            </Nav.Item>\n                            <Nav.Item>\n                                <Button\n                                    variant={'contained'}\n                                    color={'primary'}\n                                    className=\"w-full\"\n                                    onClick={handleDisconnect}\n                                >\n                                    Deconnexion\n                                </Button>\n                            </Nav.Item>\n                        </Nav>\n                    </Container>\n                </Offcanvas.Body>\n            </Offcanvas>\n        </div>\n    );\n}\n\nexport interface AvatarModalProps {\n    image: string;\n    username: string;\n    theme?: 'light' | 'dark';\n}\n\nexport default AvatarOffcanvas;\n","export function getMode(): 'light' | 'dark' {\n    return localStorage.theme || 'light';\n}\n\nexport default getMode;\n","import refresh from '../utils';\n\nexport function changeMode(customMode?: 'light' | 'dark'): void {\n    const mode = customMode ? customMode : localStorage.theme;\n    if (mode === 'light') {\n        localStorage.theme = 'dark';\n        document.documentElement.classList.add('dark');\n        refresh();\n    } else {\n        localStorage.theme = 'light';\n        document.documentElement.classList.remove('dark');\n        refresh();\n    }\n}\n\nexport default changeMode;\n","import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { Button, Spinner } from 'react-bootstrap';\nimport { Brightness4, Brightness7 } from '@material-ui/icons';\nimport LoginModal from './LoginModal';\nimport AvatarOffcanvas from './AvatarOffcanvas';\nimport isLoggedIn from '../middleware/isLoggedIn';\nimport removeToken from '../middleware/removeToken';\nimport getMode from '../middleware/getMode';\nimport refresh from '../utils';\nimport isDark from '../middleware/isDark';\nimport changeMode from '../middleware/changeMode';\n\nexport function Topbar({ data, className }: TopbarProps): JSX.Element {\n    const [show, setShow] = useState(false);\n    const btnLabel = isLoggedIn() ? 'Logout' : 'Login';\n    const colorTheme = getMode();\n\n    const handleShow = () => (!isLoggedIn() ? setShow(true) : removeToken() && refresh());\n    const handleClose = () => setShow(false);\n    const handleChangeMode = () => {\n        changeMode();\n    };\n\n    return (\n        <div\n            className={clsx(\n                className,\n                'flex border-b  w-full h-16 justify-between items-center absolute',\n                isDark() ? 'bg-darker border-light text-light' : 'bg-light border-danger text-dark',\n            )}\n        >\n            <div className=\"w-full h-full flex items-center min-w-max ml-2\">\n                <a href=\"/\" className=\"text-decoration-none link-dark\">\n                    <span className={clsx(' text-2xl font-bold', isDark() ? 'text-primary' : 'text-success')}>\n                        Saejina\n                    </span>\n                </a>\n            </div>\n            <div className=\"mr-2 flex flex-row items-center space-x-4\">\n                <button onClick={handleChangeMode}>\n                    {colorTheme === 'light' ? (\n                        <Brightness4 className=\"text-dark\" />\n                    ) : (\n                        <Brightness7 className=\"text-lighter\" />\n                    )}\n                </button>\n                {btnLabel === 'Login' ? (\n                    <Button color={isDark() ? 'primary' : 'success'} onClick={handleShow}>\n                        {btnLabel}\n                    </Button>\n                ) : data.profilePic ? (\n                    <AvatarOffcanvas image={data.profilePic} username={data.username} />\n                ) : (\n                    <Spinner animation=\"border\" />\n                )}\n                <LoginModal show={show} onHide={handleClose} backdropClassName=\"bg-error\" setShow={setShow} />\n            </div>\n        </div>\n    );\n}\n\nexport interface TopbarProps {\n    data?: any;\n    className?: string;\n}\n\nexport default Topbar;\n","import React from 'react';\nimport clsx from 'clsx';\nimport { useLocation } from 'react-router-dom';\nimport Sidebar from './Sidebar';\nimport Topbar from './Topbar';\nimport { children } from '../types';\nimport isDark from '../middleware/isDark';\n\nexport function AppLayout({ children, data }: AppLayoutProps): JSX.Element {\n    const path = useLocation().pathname;\n\n    return (\n        <div className={clsx('flex flex-col', isDark() ? 'bg-dark' : 'bg-lighter')}>\n            <Topbar data={data} className=\"shadow-md\" />\n            <div className=\"flex mt-16\">\n                <Sidebar active={path} className=\"shadow-md\" />\n                <div className={clsx('mx-1 p-3 w-full h-full', isDark() ? 'text-light' : 'text-dark')}>{children}</div>\n            </div>\n        </div>\n    );\n}\n\nexport interface AppLayoutProps {\n    children?: children;\n    data: any;\n}\n\nexport default AppLayout;\n","import axios from 'axios';\n\nexport default async function getDiscordServers(setDiscordServers: Function): Promise<void> {\n    axios\n        .get(process.env.REACT_APP_API_ADDRESS + '/discord/servers', {\n            params: { token: localStorage.getItem('saejinaToken') },\n        })\n        .then((response) => {\n            setDiscordServers(response.data.servers);\n        });\n}\n","import { useState, useEffect } from 'react';\nimport isLoggedIn from '../middleware/isLoggedIn';\nimport getDiscordServers from '../middleware/getDiscordServers';\n\nexport default function useDiscordData(): any {\n    const defaultData = [{ id: '', name: '', serverPic: '' }];\n    const [discordServers, setDiscordServers] = useState(defaultData);\n    useEffect(() => {\n        if (isLoggedIn()) getDiscordServers(setDiscordServers);\n    }, [setDiscordServers]);\n    return discordServers;\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport Select from 'react-select';\nimport { Image } from 'react-bootstrap';\nimport useDiscordServers from '../hooks/useDiscordServers';\n\nfunction ServerTemplate({ name, serverPic }: ServerTemplateProps) {\n    const cleared = name.replace(\n        /([\\u2700-\\u27BF]|[\\uE000-\\uF8FF]|\\uD83C[\\uDC00-\\uDFFF]|\\uD83D[\\uDC00-\\uDFFF]|[\\u2011-\\u26FF]|\\uD83E[\\uDD10-\\uDDFF])/g,\n        '',\n    );\n\n    const initials = cleared.split(' ').map((word) => word[0]);\n    return (\n        <div className=\"flex flex-row items-center\">\n            <div\n                className={clsx(\n                    'flex items-center justify-center w-6 h-6 rounded-full',\n                    !serverPic && 'bg-dark text-light text-sm',\n                )}\n            >\n                {serverPic ? <Image src={serverPic} roundedCircle fluid /> : <div>{initials}</div>}\n            </div>\n            <div className=\"ml-2\">{name}</div>\n        </div>\n    );\n}\n\ninterface ServerTemplateProps {\n    id: string;\n    name: string;\n    serverPic?: string;\n}\n\nfunction ServerDropdown({ className, setServer }: ServerDropdownProps): JSX.Element {\n    const discordServers = useDiscordServers();\n    const handleChange = (value: any) => {\n        setServer(value.value);\n    };\n    const newopts = discordServers\n        ? discordServers.map((server: ServerTemplateProps) => {\n              return { value: server, label: ServerTemplate(server) };\n          })\n        : [];\n\n    return (\n        <div className={clsx(className)}>\n            <Select\n                options={newopts}\n                isSearchable={false}\n                onChange={handleChange}\n                placeholder=\"Selectionnez un serveur ...\"\n            />\n        </div>\n    );\n}\n\nexport interface ServerDropdownProps {\n    className?: string;\n    setServer: Function;\n}\n\nexport default ServerDropdown;\n","import axios from 'axios';\n\nexport default async function getDiscordChannels(setDiscordChannels: Function, serverId: string): Promise<void> {\n    axios\n        .get(process.env.REACT_APP_API_ADDRESS + '/discord/channels/' + serverId, {\n            params: { token: localStorage.getItem('saejinaToken') },\n        })\n        .then((response) => {\n            setDiscordChannels(response.data.channels);\n        });\n}\n","import { useState, useEffect } from 'react';\nimport isLoggedIn from '../middleware/isLoggedIn';\nimport getDiscordChannels from '../middleware/getDiscordChannels';\n\nexport default function useDiscordChannels(id: string): any {\n    const defaultData = [{ id: '', name: '', category: '' }];\n    const [discordChannels, setDiscordChannels] = useState(defaultData);\n    useEffect(() => {\n        if (isLoggedIn()) getDiscordChannels(setDiscordChannels, id);\n    }, [setDiscordChannels]);\n    return discordChannels;\n}\n","import React from 'react';\nimport clsx from 'clsx';\nimport Select from 'react-select';\nimport useDiscordChannels from '../hooks/useDiscordChannels';\n\nfunction ChannelTemplate({ name, category = '' }: ChannelTemplateProps) {\n    return (\n        <div className=\"flex justify-between\">\n            <div>#{name}</div>\n            <div className=\"pl-96\">{category}</div>\n        </div>\n    );\n}\n\ninterface ChannelTemplateProps {\n    id: string;\n    name: string;\n    category?: string;\n}\n\nexport function ChannelDropdown({ server, setChannel, className }: ChannelDropdownProps): JSX.Element {\n    const channels = useDiscordChannels(server.id);\n    const handleChange = (value: any) => {\n        setChannel(value.value);\n    };\n    const options = channels\n        ? channels.map((channel: ChannelTemplateProps) => {\n              return { value: channel, label: ChannelTemplate(channel) };\n          })\n        : [];\n    return (\n        <div className={clsx(className)}>\n            <Select\n                onChange={handleChange}\n                isLoading={!!!channels}\n                isDisabled={!!!server}\n                options={options}\n                isSearchable={false}\n            />\n        </div>\n    );\n}\n\nexport interface ChannelDropdownProps {\n    className?: string;\n    server: any;\n    setChannel: Function;\n}\n\nexport default ChannelDropdown;\n","import React from 'react';\nimport { ListGroup, Button } from 'react-bootstrap';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nexport function ItemsTable({ items = [], className }: ItemsTableProps): JSX.Element | null {\n    return items.length > 0 ? (\n        <div className={className}>\n            <ListGroup>\n                {items.map((item, index) => {\n                    return (\n                        <ListGroup.Item key={`option-${index}`} className={'flex items-center justify-between'}>\n                            {item.text}\n                            <Button id={`${index}`} variant=\"warning\" onClick={item.onClick}>\n                                <DeleteIcon />\n                            </Button>\n                        </ListGroup.Item>\n                    );\n                })}\n            </ListGroup>\n        </div>\n    ) : null;\n}\n\nexport interface ItemsTableProps {\n    items?: {\n        text: string;\n        onClick?: any;\n    }[];\n    className?: string;\n}\n\nexport default ItemsTable;\n","import React, { useReducer, useEffect, useState } from 'react';\nimport Axios from 'axios';\nimport { TextField, Checkbox, createTheme } from '@material-ui/core';\nimport { ThemeProvider } from '@material-ui/styles';\nimport ControlPointIcon from '@material-ui/icons/ControlPoint';\nimport { Button } from 'react-bootstrap';\nimport ServerDropdown from '../components/ServerDropdown';\nimport ChannelDropdown from '../components/ChannelDropdown';\nimport ItemsTable from '../components/ItemsTable';\nimport isDark from '../middleware/isDark';\n\nconst theme = createTheme({\n    palette: {\n        primary: { main: '#1f51ff' },\n    },\n});\n\ntype State = {\n    channelId: string;\n    question: string;\n    currentOption: string;\n    options: string[];\n    time?: string;\n    isButtonDisabled: boolean;\n    isOptionDisabled: boolean;\n    isTimeUsed: boolean;\n    helperText: string;\n    isError: boolean;\n};\n\nconst initialState: State = {\n    channelId: '',\n    question: '',\n    currentOption: '',\n    options: [],\n    isButtonDisabled: true,\n    isOptionDisabled: true,\n    isTimeUsed: false,\n    helperText: '',\n    isError: false,\n};\n\ntype Action =\n    | { type: 'setChannelId'; payload: any }\n    | { type: 'setQuestion'; payload: string }\n    | { type: 'setCurrentOption'; payload: string }\n    | { type: 'addOption'; payload: string }\n    | { type: 'removeOption'; payload: number }\n    | { type: 'setTime'; payload: string }\n    | { type: 'setIsButtonDisabled'; payload: boolean }\n    | { type: 'setIsOptionDisabled'; payload: boolean }\n    | { type: 'setIsTimeUsed'; payload: boolean }\n    | { type: 'success'; payload: string }\n    | { type: 'fail'; payload: string }\n    | { type: 'setIsError'; payload: boolean };\n\nconst reducer = (state: State, action: Action): State => {\n    switch (action.type) {\n        case 'setChannelId':\n            return {\n                ...state,\n                channelId: action.payload.id,\n            };\n        case 'setQuestion':\n            return {\n                ...state,\n                question: action.payload,\n            };\n        case 'setCurrentOption':\n            return {\n                ...state,\n                currentOption: action.payload,\n            };\n        case 'addOption':\n            return {\n                ...state,\n                options: state.options.concat(action.payload),\n            };\n        case 'removeOption':\n            state.options.splice(action.payload, 1);\n            return {\n                ...state,\n            };\n        case 'setTime':\n            return {\n                ...state,\n                time: action.payload,\n            };\n        case 'setIsButtonDisabled':\n            return {\n                ...state,\n                isButtonDisabled: action.payload,\n            };\n        case 'setIsOptionDisabled':\n            return {\n                ...state,\n                isOptionDisabled: action.payload,\n            };\n        case 'setIsTimeUsed':\n            return {\n                ...state,\n                isTimeUsed: action.payload,\n            };\n        case 'success':\n            return {\n                ...state,\n                helperText: action.payload,\n                isError: false,\n            };\n        case 'fail':\n            return {\n                ...state,\n                helperText: action.payload,\n                isError: true,\n            };\n        case 'setIsError':\n            return {\n                ...state,\n                isError: action.payload,\n            };\n    }\n};\n\nexport function PollForm(): JSX.Element {\n    const [state, dispatch] = useReducer(reducer, initialState);\n    const [server, setServer] = useState({ id: '', name: '', serverPic: '' });\n\n    useEffect(() => {\n        if (state.question.trim() && state.channelId.trim() && state.options.length > 0) {\n            dispatch({\n                type: 'setIsButtonDisabled',\n                payload: false,\n            });\n        } else {\n            dispatch({\n                type: 'setIsButtonDisabled',\n                payload: true,\n            });\n        }\n        if (state.currentOption.trim()) {\n            dispatch({\n                type: 'setIsOptionDisabled',\n                payload: false,\n            });\n        } else {\n            dispatch({\n                type: 'setIsOptionDisabled',\n                payload: true,\n            });\n        }\n    }, [state.question, state.channelId, state.options, state.currentOption]);\n\n    const handleCreation = () => {\n        const params = {\n            channelId: state.channelId,\n            options: state.options,\n            question: state.question,\n            serverId: server.id,\n            time: state.time,\n        };\n        Axios.post(process.env.REACT_APP_API_ADDRESS + '/commands/poll', { params: params })\n            .then(() => {\n                dispatch({\n                    type: 'success',\n                    payload: 'Sondage créé',\n                });\n            })\n            .catch((error) => {\n                console.log(error);\n                dispatch({\n                    type: 'fail',\n                    payload: 'Une erreur est survenue',\n                });\n            });\n    };\n    const handleOptionAdd = () => {\n        dispatch({\n            type: 'addOption',\n            payload: state.currentOption,\n        });\n    };\n    const handleKeyPress = (event: React.KeyboardEvent) => {\n        if (event.keyCode === 13 || event.which === 13) {\n            state.isOptionDisabled || handleOptionAdd();\n        }\n    };\n    const handleQuestionChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n        dispatch({\n            type: 'setQuestion',\n            payload: event.target.value,\n        });\n    };\n    const handleCurrentOptionChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n        dispatch({\n            type: 'setCurrentOption',\n            payload: event.target.value,\n        });\n    };\n    const handleChannelIdChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n        dispatch({\n            type: 'setChannelId',\n            payload: event,\n        });\n    };\n    const handleTimeChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n        dispatch({\n            type: 'setTime',\n            payload: event.target.value,\n        });\n    };\n    const handleIsTimeUsedChange: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n        dispatch({\n            type: 'setIsTimeUsed',\n            payload: event.target.checked,\n        });\n    };\n    const handleRemoveOption: React.ChangeEventHandler<HTMLInputElement> = (event) => {\n        console.log(event);\n        dispatch({\n            type: 'removeOption',\n            payload: Number(event.target.parentElement?.id),\n        });\n    };\n    return (\n        <ThemeProvider theme={theme}>\n            <form className={'flex-col space-y-4'}>\n                <ServerDropdown setServer={setServer} className={'text-dark'} />\n                {server.id !== '' && (\n                    <ChannelDropdown server={server} setChannel={handleChannelIdChange} className={'text-dark'} />\n                )}\n                <TextField\n                    error={state.isError}\n                    fullWidth\n                    id=\"question\"\n                    type=\"question\"\n                    label=\"Question\"\n                    placeholder=\"Havok est il le meilleur des devs ? :)\"\n                    margin=\"normal\"\n                    onChange={handleQuestionChange}\n                    className={isDark() ? 'text-light border-light' : 'text-dark border-danger'}\n                />\n                <div className=\"grid grid-cols-8 items-center space-x-4\">\n                    <TextField\n                        error={state.isError}\n                        id=\"option\"\n                        type=\"option\"\n                        label=\"Option\"\n                        placeholder=\"Oui ! UwU\"\n                        margin=\"normal\"\n                        onChange={handleCurrentOptionChange}\n                        onKeyPress={handleKeyPress}\n                        className={'col-span-7'}\n                    />\n                    <Button\n                        variant=\"warning\"\n                        onClick={handleOptionAdd}\n                        disabled={state.isOptionDisabled}\n                        className={'col-span-1 flex-grow'}\n                    >\n                        <ControlPointIcon />\n                    </Button>\n                </div>\n                <ItemsTable\n                    items={state.options.map((option) => {\n                        return { text: option, onClick: handleRemoveOption };\n                    })}\n                />\n                <div className=\"flex items-end space-x-4\">\n                    <TextField\n                        error={state.isError}\n                        id=\"duration\"\n                        type=\"duration\"\n                        label=\"Temps\"\n                        placeholder=\"1h 23min 45s\"\n                        margin=\"normal\"\n                        helperText={state.helperText}\n                        disabled={!state.isTimeUsed}\n                        onChange={handleTimeChange}\n                    />\n                    <div className=\"flex items-center\">\n                        <Checkbox\n                            checked={state.isTimeUsed}\n                            onChange={handleIsTimeUsedChange}\n                            className=\"text-warning\"\n                            name=\"Spécifier un temps\"\n                        />\n                        <div className=\"text-dark pb-1\">Spécifier un temps</div>\n                    </div>\n                </div>\n                <Button\n                    variant=\"success\"\n                    size=\"lg\"\n                    className={'flex-grow w-full'}\n                    onClick={handleCreation}\n                    disabled={state.isButtonDisabled}\n                >\n                    Créer\n                </Button>\n            </form>\n        </ThemeProvider>\n    );\n}\n\nexport default PollForm;\n","import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { Button, Offcanvas, OffcanvasProps } from 'react-bootstrap';\nimport isDark from '../middleware/isDark';\nimport PollForm from '../forms/PollForm';\n\nfunction PollOffCanvas({ className, ...props }: OffcanvasProps): JSX.Element {\n    return (\n        <Offcanvas\n            placement=\"end\"\n            scroll={true}\n            backdrop={true}\n            className={clsx(isDark() ? 'bg-dark text-light' : 'bg-light text-dark', className)}\n            {...props}\n        >\n            <Offcanvas.Header closeButton closeVariant={isDark() ? 'white' : undefined}>\n                Créer un sondage\n            </Offcanvas.Header>\n            <Offcanvas.Body>\n                <PollForm></PollForm>\n            </Offcanvas.Body>\n        </Offcanvas>\n    );\n}\n\nexport function Poll({ className }: PollProps): JSX.Element {\n    const [show, setShow] = useState(false);\n\n    const handleShow = () => setShow(true);\n    const handleClose = () => setShow(false);\n    return (\n        <div className={className}>\n            <PollOffCanvas show={show} onHide={handleClose} className=\"w-1/2\"></PollOffCanvas>\n            <Button variant={isDark() ? 'primary' : 'warning'} onClick={handleShow}>\n                Créer un sondage\n            </Button>\n        </div>\n    );\n}\n\nexport interface PollProps {\n    className?: string;\n}\n\nexport default Poll;\n","import axios from 'axios';\n\nexport async function getDiscordData(setDiscordData: Function, id?: string): Promise<void> {\n    if (id) {\n        axios.get(process.env.REACT_APP_API_ADDRESS + '/discord/user/' + id).then((response) => {\n            setDiscordData({\n                username: response.data.username,\n                id: response.data.discord_id,\n                platformId: response.data.id,\n                profilePic: response.data.profilePic,\n            });\n        });\n    } else {\n        axios\n            .get(process.env.REACT_APP_API_ADDRESS + '/discord/user', {\n                params: { token: localStorage.getItem('saejinaToken') },\n            })\n            .then((response) => {\n                setDiscordData({\n                    username: response.data.username,\n                    id: response.data.discord_id,\n                    platformId: response.data.id,\n                    profilePic: response.data.profilePic,\n                });\n            });\n    }\n}\n\nexport default getDiscordData;\n","import { useState, useEffect } from 'react';\nimport isLoggedIn from '../middleware/isLoggedIn';\nimport getDiscordData from '../middleware/getDiscordData';\n\nexport default function useDiscordData(id?: string): any {\n    const defaultData = { username: '', id: '', profilePic: '' };\n    const [discordData, setDiscordData] = useState(defaultData);\n    useEffect(() => {\n        if (isLoggedIn()) getDiscordData(setDiscordData, id);\n    }, [setDiscordData]);\n    return discordData;\n}\n","import React from 'react';\nimport AppLayout from '../components/AppLayout';\nimport Poll from '../components/Poll';\nimport { withRouter } from 'react-router-dom';\nimport useDiscordData from '../hooks/useDiscordData';\n\nexport function Commands(): JSX.Element {\n    const discordData = useDiscordData();\n    return (\n        <AppLayout data={discordData}>\n            <div className=\"flex\">\n                <Poll />\n            </div>\n        </AppLayout>\n    );\n}\n\nexport default withRouter(Commands);\n","import { AppLayout } from '../components/AppLayout';\nimport { withRouter } from 'react-router-dom';\nimport useDiscordData from '../hooks/useDiscordData';\n\nexport function Home(): JSX.Element {\n    const discordData = useDiscordData();\n    return <AppLayout data={discordData}>Welcome {discordData.username} !</AppLayout>;\n}\n\nexport default withRouter(Home);\n","import React from 'react';\n\nexport function NotFound(): JSX.Element {\n    return (\n        <div className={'flex items-center justify-center text-9xl'}>\n            <span>NOT FOUND</span>\n        </div>\n    );\n}\n\nexport default NotFound;\n","import React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport { FormControlLabel, FormHelperText, Checkbox } from '@material-ui/core';\nimport isDark from '../middleware/isDark';\nimport setNewPermissions from '../middleware/setNewPermissions';\n\nexport function PermissionForm({ permissions, data, handleClose }: PermissionFormProps): JSX.Element {\n    const [administrator, setAdministrator] = useState(permissions.includes('administrator'));\n    const [community, setCommunity] = useState(permissions.includes('community'));\n    const [commands, setCommands] = useState(permissions.includes('commands'));\n\n    const handleAdministratorChange = (event: any, checked: boolean) => setAdministrator(checked);\n    const handleCommunityChange = (event: any, checked: boolean) => setCommunity(checked);\n    const handleCommandsChange = (event: any, checked: boolean) => setCommands(checked);\n    const [helperText, setHelperText] = useState({ err: false, msg: '' });\n\n    const handlePermissionsChange = () =>\n        setNewPermissions(administrator, community, commands, data.platformId, setHelperText, handleClose);\n\n    const fields = [\n        { label: 'Administrator', onChange: handleAdministratorChange, value: administrator },\n        { label: 'Community', onChange: handleCommunityChange, value: community },\n        { label: 'Commands', onChange: handleCommandsChange, value: commands },\n    ];\n    return (\n        <form noValidate autoComplete=\"off\" className=\"flex flex-col\">\n            {fields.map((field, index: number) => {\n                return (\n                    <FormControlLabel\n                        key={'user-' + index}\n                        control={\n                            <Checkbox\n                                checked={field.value}\n                                name={field.label}\n                                className={isDark() ? 'text-primary' : ''}\n                                color={isDark() ? 'primary' : 'secondary'}\n                                onChange={field.onChange}\n                            />\n                        }\n                        label={field.label}\n                    />\n                );\n            })}\n            {helperText.msg && (\n                <FormHelperText className={isDark() ? 'text-light' : 'text-dark'}>{helperText.msg}</FormHelperText>\n            )}\n            <Button variant=\"success\" size=\"lg\" className={'flex-grow w-full mt-4'} onClick={handlePermissionsChange}>\n                Valider\n            </Button>\n        </form>\n    );\n}\n\nexport interface PermissionFormProps {\n    permissions: any[];\n    data: any;\n    handleClose?: Function;\n}\n\nexport default PermissionForm;\n","import axios from 'axios';\n\nexport default function setNewPermissions(\n    administrator: boolean,\n    community: boolean,\n    commands: boolean,\n    id: string,\n    setHelper: Function,\n    handleClose?: Function,\n): void {\n    axios\n        .put(process.env.REACT_APP_API_ADDRESS + '/perms/edit/' + id, {\n            params: { administrator, community, commands },\n        })\n        .then(() => {\n            setHelper({ err: false, msg: 'Changements sauvegardés.' });\n            handleClose && handleClose();\n        })\n        .catch((error) => {\n            console.log(error);\n            setHelper({ err: true, msg: \"Une erreur s'est produite\" });\n        });\n}\n","import React, { useState, useEffect } from 'react';\nimport clsx from 'clsx';\nimport { Image, Spinner, Modal } from 'react-bootstrap';\nimport useDiscordData from '../hooks/useDiscordData';\nimport usePermissions from '../hooks/usePermissions';\nimport isDark from '../middleware/isDark';\nimport getPermissions from '../middleware/getPermissions';\nimport { createTheme, ThemeProvider } from '@material-ui/core';\nimport PermissionForm from './PermissionForm';\n\nconst theme = createTheme({\n    palette: {\n        primary: { main: '#f180f8' },\n        secondary: { main: '#1f51ff' },\n    },\n});\n\nexport function UserPermissionsCard({ id, className }: UserPermissionsCardProps): JSX.Element {\n    const discordData = useDiscordData(id);\n    const [isLoading, setIsLoading] = useState(true);\n    const [permissions, setPermissions] = usePermissions(discordData.platformId);\n    const [show, setShow] = useState(false);\n\n    const handleShow = () => setShow(true);\n    const handleClose = () => {\n        setShow(false);\n        getPermissions(setPermissions, discordData.platformId);\n    };\n\n    useEffect(() => {\n        if (discordData) setIsLoading(false);\n    }, [discordData, setIsLoading]);\n\n    return (\n        <div>\n            <button onClick={handleShow} className={className}>\n                {isLoading ? (\n                    <Spinner animation=\"border\" />\n                ) : (\n                    <div className=\"flex flex-col h-24 w-24 space-y-1 p-2\">\n                        <Image src={discordData.profilePic} roundedCircle fluid />\n                        <div className=\"self-center\">{discordData.username}</div>\n                    </div>\n                )}\n            </button>\n            <ThemeProvider theme={theme}>\n                <Modal show={show} onHide={handleClose} centered contentClassName=\"bg-darker\">\n                    <Modal.Header\n                        closeButton\n                        closeVariant={isDark() ? 'white' : undefined}\n                        className={clsx(\n                            isDark() ? 'bg-darker text-light border-light' : 'bg-light text-dark border-dark',\n                        )}\n                    >\n                        <Modal.Title>{discordData.username}</Modal.Title>\n                    </Modal.Header>\n                    <Modal.Body className={clsx(isDark() ? 'bg-darker text-light' : 'bg-light text-dark')}>\n                        {permissions ? (\n                            <PermissionForm permissions={permissions} data={discordData} handleClose={handleClose} />\n                        ) : (\n                            <Spinner animation=\"border\" />\n                        )}\n                    </Modal.Body>\n                </Modal>\n            </ThemeProvider>\n        </div>\n    );\n}\n\nexport interface UserPermissionsCardProps {\n    id: string;\n    className?: string;\n}\n\nexport default UserPermissionsCard;\n","import axios from 'axios';\n\nexport default async function getDiscordIds(setDiscordIds: Function): Promise<void> {\n    axios.get(process.env.REACT_APP_API_ADDRESS + '/discord/ids').then((response) => {\n        setDiscordIds(response.data);\n    });\n}\n","import { useState, useEffect } from 'react';\nimport getDiscordIds from '../middleware/getDiscordIds';\n\nexport default function useDiscordIds(): any[] {\n    const [discordIds, setDiscordIds] = useState([]);\n    useEffect(() => {\n        getDiscordIds(setDiscordIds);\n    }, [setDiscordIds]);\n    return discordIds;\n}\n","import React from 'react';\nimport AppLayout from '../components/AppLayout';\nimport UserPermissionsCard from '../components/UserPermissionsCard';\nimport { withRouter } from 'react-router-dom';\nimport useDiscordData from '../hooks/useDiscordData';\nimport useDiscordIds from '../hooks/useDiscordIds';\n\nexport function Permissions(): JSX.Element {\n    const discordData = useDiscordData();\n    const discordIds = useDiscordIds();\n\n    return (\n        <AppLayout data={discordData}>\n            <div className=\"flex flex-wrap justify-around\">\n                {discordIds.map((id: any, index: number) => {\n                    return <UserPermissionsCard id={id.discord_id} key={'user-' + index} />;\n                })}\n            </div>\n        </AppLayout>\n    );\n}\n\nexport default withRouter(Permissions);\n","import AppLayout from '../components/AppLayout';\nimport { withRouter } from 'react-router-dom';\nimport useDiscordData from '../hooks/useDiscordData';\n\nexport function Users(): JSX.Element {\n    const data = useDiscordData();\n    return <AppLayout data={data}>Users</AppLayout>;\n}\n\nexport default withRouter(Users);\n","import * as pages from '../pages';\n\nconst routes = [\n    { path: '/users', page: pages['Users'], secured: true, permission: 'community' },\n    { path: '/commands', page: pages['Commands'], secured: true, permission: 'commands' },\n    { path: '/permissions', page: pages['Permissions'], secured: true, permission: 'administrator' },\n    { path: '/', page: pages['Home'] },\n    { path: '/404', page: pages['NotFound'] },\n];\n\nexport default routes;\n","import React, { useState, useEffect } from 'react';\nimport { Spinner } from 'react-bootstrap';\nimport usePermissions from '../hooks/usePermissions';\nimport useDiscordData from '../hooks/useDiscordData';\nimport isDark from '../middleware/isDark';\nimport AppLayout from '../components/AppLayout';\n\nfunction PrivateComponent({ children, openedChildren, neededPermission }: PrivateComponentProps): JSX.Element {\n    const [permissions] = usePermissions();\n    const [isLoading, setIsLoading] = useState(true);\n    const discordData = useDiscordData();\n\n    useEffect(() => {\n        setIsLoading(!permissions);\n    }, [setIsLoading, permissions]);\n    return neededPermission ? (\n        isLoading ? (\n            <AppLayout data={discordData}>\n                <Spinner animation=\"border\" className={isDark() ? 'bg-dark' : 'bg-lighter'} />\n            </AppLayout>\n        ) : permissions.includes(neededPermission) || permissions.includes('administrator') ? (\n            children\n        ) : (\n            openedChildren\n        )\n    ) : (\n        children\n    );\n}\n\nexport interface PrivateComponentProps {\n    children: JSX.Element;\n    openedChildren: JSX.Element;\n    neededPermission?: string;\n}\n\nexport default PrivateComponent;\n","import React from 'react';\nimport { RouteProps, Route, Redirect } from 'react-router';\nimport isLoggedIn from '../middleware/isLoggedIn';\nimport PrivateComponent from './PrivateComponent';\n\nexport function PrivateRoute({ neededPermission, ...routeProps }: PrivateRouteProps): JSX.Element {\n    return isLoggedIn() ? (\n        <PrivateComponent neededPermission={neededPermission} openedChildren={<Redirect to=\"/\" />}>\n            <Route {...routeProps} />\n        </PrivateComponent>\n    ) : (\n        <Redirect to=\"/\" />\n    );\n}\n\nexport interface PrivateRouteProps extends RouteProps {\n    neededPermission?: string;\n}\n\nexport default PrivateRoute;\n","import { createTheme } from '@material-ui/core';\n\nexport const theme = createTheme({\n    palette: {\n        primary: { main: '#f180f8' },\n        secondary: { main: '#04FFF7' },\n        warning: { main: '#1f51ff' },\n    },\n});\n\nexport default theme;\n","import React, { useEffect } from 'react';\nimport routes from './configs/routes';\nimport { BrowserRouter as Router, Switch, Route, Redirect } from 'react-router-dom';\nimport { ThemeProvider } from '@material-ui/core';\nimport PrivateRoute from './components/PrivateRoute';\nimport cleanLocalStorage from './middleware/cleanLocalStorage';\nimport theme from './configs/mui-theme';\n\nfunction App(): JSX.Element {\n    useEffect(() => {\n        cleanLocalStorage();\n    });\n    return (\n        <ThemeProvider theme={theme}>\n            <Router>\n                <Switch>\n                    {routes.map(({ path, page, secured, permission }, index) => {\n                        if (secured)\n                            return (\n                                <PrivateRoute\n                                    key={index}\n                                    path={path}\n                                    component={page}\n                                    exact\n                                    neededPermission={permission}\n                                />\n                            );\n                        else return <Route key={index} path={path} component={page} exact />;\n                    })}\n                    <Redirect to=\"/404\" />\n                </Switch>\n            </Router>\n        </ThemeProvider>\n    );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler): void => {\n    if (onPerfEntry && onPerfEntry instanceof Function) {\n        import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n            getCLS(onPerfEntry);\n            getFID(onPerfEntry);\n            getFCP(onPerfEntry);\n            getLCP(onPerfEntry);\n            getTTFB(onPerfEntry);\n        });\n    }\n};\n\nexport default reportWebVitals;\n","export function darkModeConfig(): void {\n    let theme = 'light';\n    if (localStorage.theme) {\n        theme = localStorage.theme;\n    } else if (window.matchMedia('(prefers-color-scheme: dark)').matches) {\n        theme = 'dark';\n    }\n    if (theme === 'dark') {\n        document.documentElement.classList.add('dark');\n    } else {\n        document.documentElement.classList.remove('dark');\n    }\n}\n\nexport default darkModeConfig;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './custom.scss';\nimport './index.css';\nimport darkModeConfig from './configs/darkMode';\n\ndarkModeConfig();\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}